---
- name: Install Grafana
  yum:
    name: "{{ grafana_packages }}"
    state: installed
  tags: package

- name: Configure Grafana
  template:
    src: grafana.ini.j2
    dest: /etc/grafana/grafana.ini
  notify: restart grafana

- name: Install Grafana service
  service:
    name: grafana-server
    state: started
    enabled: yes

- name: Wait for Grafana port
  wait_for:
    port: "{{ grafana_port }}"

- name: Copy the oVirt Engine CA to Grafana machine
  copy:
    src: "/etc/pki/ovirt-engine/ca.pem"
    dest: "/etc/pki/ca-trust/source/anchors/"

- name: Add the certificate to system-wide trusted certificates
  command: update-ca-trust

- name: Read DWH config file
  slurp:
    src: "{{ ovirt_engine_dwh_etc_conf_dir_path }}/10-setup-database.conf"
  register: file_content

- name: Matching related DWH DB configs
  set_fact:
    ovirt_engine_dwh_decoded_content: "{{ ((file_content['content'] | b64decode).split('\n') | select('match', 'DWH_DB*') | list) }}"
    ovirt_engine_decoded_content: "{{ ((file_content['content'] | b64decode).split('\n') | select('match', 'ENGINE_DB*') | list) }}"

- debug:
    msg: "{{ ovirt_engine_dwh_decoded_content }}"

- name: Set facts for dwh db variables
  set_fact:
    ovirt_engine_dwh_db: >
      {{
        ovirt_engine_dwh_db | default({}) |
        combine(
          dict([ [item.partition('=')[0], item.partition('=')[2] | regex_replace('\"', '')] ])
        )
      }}
  with_items: "{{ ovirt_engine_dwh_decoded_content }}"

- debug:
    msg: "{{ ovirt_engine_decoded_content }}"

- name: Set facts for engine db variables
  set_fact:
    ovirt_engine_db: >
      {{
        ovirt_engine_db | default({}) |
        combine(
          dict([ [item.partition('=')[0], item.partition('=')[2] | regex_replace('\"', '')] ])
        )
      }}
  with_items: "{{ ovirt_engine_decoded_content }}"

- debug:
    msg: "{{ ovirt_engine_db }}"

- name: Set facts for engine and dwh db variables
  set_fact:
    ovirt_engine_dwh_db_name: "{{ ovirt_engine_dwh_db['DWH_DB_DATABASE'] }}"
    ovirt_engine_dwh_db_user: "{{ ovirt_engine_dwh_db['DWH_DB_USER'] }}"
    ovirt_engine_dwh_db_password: "{{ ovirt_engine_dwh_db['DWH_DB_PASSWORD'] }}"
    ovirt_engine_dwh_db_host: "{{ ovirt_engine_dwh_db['DWH_DB_HOST'] }}"
    ovirt_engine_dwh_db_port: "{{ ovirt_engine_dwh_db['DWH_DB_PORT'] }}"
    ovirt_engine_db_name: "{{ ovirt_engine_db['ENGINE_DB_DATABASE'] }}"
    ovirt_engine_db_user: "{{ ovirt_engine_db['ENGINE_DB_USER'] }}"
    ovirt_engine_db_password: "{{ ovirt_engine_db['ENGINE_DB_PASSWORD'] }}"
    ovirt_engine_db_host: "{{ ovirt_engine_db['ENGINE_DB_HOST'] }}"
    ovirt_engine_db_port: "{{ ovirt_engine_db['ENGINE_DB_PORT'] }}"

- name: Check if ovirt-grafana user credentials file already exists
  stat:
    path: "{{ ovirt_grafana_user_password_file_path }}"
  register: ovirt_grafana_user_password_stat_result

- name: Include ovirt-grafana user password
  include_vars:
    file: "{{ ovirt_grafana_user_password_file_path }}"
  when:  ovirt_grafana_user_password_stat_result.stat.exists

- name: Generate password for ovirt-grafana user
  set_fact:
    ovirt_grafana_user_password: "{{ lookup('password', '/dev/null length=22 chars=ascii_letters') }}"
  when: ovirt_grafana_user_password_stat_result.stat.exists == False

- name: Save ovirt-grafana user password fo file
  template:
    src: "{{ role_path }}/templates/ovirt-grafana-user.template"
    dest: "{{ ovirt_grafana_user_password_file_path }}"
    owner: grafana
    group: root
    mode: '0640'
  when: ovirt_grafana_user_password_stat_result.stat.exists == False

- name: Grant ovirt-grafana user access to the DWH database using md5 authentication.
  postgresql_pg_hba:
    dest: "{{ ovirt_engine_postgres_pg_hba_file_path|d('/var/lib/pgsql/data/pg_hba.conf') }}"
    contype: host
    users: "{{ ovirt_grafana_user_name }}"
    source: "{{ item }}"
    databases: "{{ ovirt_engine_dwh_db_name }}"
  with_items:
    - ::0/0
    - 0.0.0.0/0

- name: Connect to history db, create Grafana read only user, and grant access to the database
  become: true
  become_user: postgres
  postgresql_user:
    db: "{{ ovirt_engine_dwh_db_name }}"
    name: "{{ ovirt_grafana_user_name }}"
    password: "{{ ovirt_grafana_user_password }}"
    priv: "CONNECT"

- name: Grant SELECT privileges to the Grafana Read Only user
  become: true
  become_user: postgres
  postgresql_privs:
    db: "{{ ovirt_engine_dwh_db_name }}"
    privs: SELECT
    schema: public
    objs: ALL_IN_SCHEMA
    roles: "{{ ovirt_grafana_user_name }}"

- name: Generate datasources.yml templates
  template:
    src: '{{ role_path }}/templates/datasources.template'
    dest: '{{ grafana_conf_provisioning_dir_path }}/datasources/ovirt-dwh.yaml'
    mode: 0644
  notify: restart grafana
